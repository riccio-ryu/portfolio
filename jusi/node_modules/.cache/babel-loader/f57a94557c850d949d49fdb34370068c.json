{"ast":null,"code":"'use strict'; //parse Empty Node as self closing node\n\nconst buildOptions = require('./util').buildOptions;\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  format: false,\n  indentBy: '  ',\n  supressEmptyNode: false,\n  tagValueProcessor: function (a) {\n    return a;\n  },\n  attrValueProcessor: function (a) {\n    return a;\n  }\n};\nconst props = ['attributeNamePrefix', 'attrNodeName', 'textNodeName', 'ignoreAttributes', 'cdataTagName', 'cdataPositionChar', 'format', 'indentBy', 'supressEmptyNode', 'tagValueProcessor', 'attrValueProcessor', 'rootNodeName' //when array as root\n];\n\nfunction Parser(options) {\n  this.options = buildOptions(options, defaultOptions, props);\n\n  if (this.options.ignoreAttributes || this.options.attrNodeName) {\n    this.isAttribute = function\n      /*a*/\n    () {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  if (this.options.cdataTagName) {\n    this.isCDATA = isCDATA;\n  } else {\n    this.isCDATA = function\n      /*a*/\n    () {\n      return false;\n    };\n  }\n\n  this.replaceCDATAstr = replaceCDATAstr;\n  this.replaceCDATAarr = replaceCDATAarr;\n  this.processTextOrObjNode = processTextOrObjNode;\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function () {\n      return '';\n    };\n\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.supressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n}\n\nParser.prototype.parse = function (jObj) {\n  if (Array.isArray(jObj) && this.options.rootNodeName && this.options.rootNodeName.length > 1) {\n    jObj = {\n      [this.options.rootNodeName]: jObj\n    };\n  }\n\n  return this.j2x(jObj, 0).val;\n};\n\nParser.prototype.j2x = function (jObj, level) {\n  let attrStr = '';\n  let val = '';\n\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {// supress undefined node\n    } else if (jObj[key] === null) {\n      val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n\n      if (attr) {\n        attrStr += ' ' + attr + '=\"' + this.options.attrValueProcessor('' + jObj[key]) + '\"';\n      } else if (this.isCDATA(key)) {\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAstr('', jObj[key]);\n        }\n      } else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          if (jObj[this.options.cdataTagName]) {//value will added while processing cdata\n          } else {\n            val += this.options.tagValueProcessor('' + jObj[key]);\n          }\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      if (this.isCDATA(key)) {\n        val += this.indentate(level);\n\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAarr('', jObj[key]);\n        }\n      } else {\n        //nested nodes\n        const arrLen = jObj[key].length;\n\n        for (let j = 0; j < arrLen; j++) {\n          const item = jObj[key][j];\n\n          if (typeof item === 'undefined') {// supress undefined node\n          } else if (item === null) {\n            val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          } else if (typeof item === 'object') {\n            val += this.processTextOrObjNode(item, key, level);\n          } else {\n            val += this.buildTextNode(item, key, '', level);\n          }\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attrNodeName && key === this.options.attrNodeName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n\n        for (let j = 0; j < L; j++) {\n          attrStr += ' ' + Ks[j] + '=\"' + this.options.attrValueProcessor('' + jObj[key][Ks[j]]) + '\"';\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level);\n      }\n    }\n  }\n\n  return {\n    attrStr: attrStr,\n    val: val\n  };\n};\n\nfunction processTextOrObjNode(object, key, level) {\n  const result = this.j2x(object, level + 1);\n\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(result.val, key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction replaceCDATAstr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata + ']]' + this.tagEndChar;\n  } else {\n    return str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata + ']]' + this.tagEndChar);\n  }\n}\n\nfunction replaceCDATAarr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata.join(']]><![CDATA[') + ']]' + this.tagEndChar;\n  } else {\n    for (let v in cdata) {\n      str = str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata[v] + ']]>');\n    }\n\n    return str + this.newLine;\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  if (attrStr && val.indexOf('<') === -1) {\n    return this.indentate(level) + '<' + key + attrStr + '>' + val + //+ this.newLine\n    // + this.indentate(level)\n    '</' + key + this.tagEndChar;\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + this.tagEndChar + val + //+ this.newLine\n    this.indentate(level) + '</' + key + this.tagEndChar;\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar; //+ this.newLine\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  return this.indentate(level) + '<' + key + attrStr + '>' + this.options.tagValueProcessor(val) + '</' + key + this.tagEndChar;\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name\n/*, options*/\n) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nfunction isCDATA(name) {\n  return name === this.options.cdataTagName;\n} //formatting\n//indentation\n//\\n after each closing or self closing tag\n\n\nmodule.exports = Parser;","map":{"version":3,"sources":["/Users/youyeonchang/Desktop/portfolio/jusi/node_modules/fast-xml-parser/src/json2xml.js"],"names":["buildOptions","require","defaultOptions","attributeNamePrefix","attrNodeName","textNodeName","ignoreAttributes","cdataTagName","cdataPositionChar","format","indentBy","supressEmptyNode","tagValueProcessor","a","attrValueProcessor","props","Parser","options","isAttribute","attrPrefixLen","length","isCDATA","replaceCDATAstr","replaceCDATAarr","processTextOrObjNode","indentate","tagEndChar","newLine","buildTextNode","buildEmptyTextNode","buildObjNode","buildEmptyObjNode","buildTextValNode","buildObjectNode","prototype","parse","jObj","Array","isArray","rootNodeName","j2x","val","level","attrStr","key","Date","attr","arrLen","j","item","Ks","Object","keys","L","object","result","undefined","str","cdata","replace","join","v","indexOf","repeat","name","startsWith","substr","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n//parse Empty Node as self closing node\nconst buildOptions = require('./util').buildOptions;\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  format: false,\n  indentBy: '  ',\n  supressEmptyNode: false,\n  tagValueProcessor: function(a) {\n    return a;\n  },\n  attrValueProcessor: function(a) {\n    return a;\n  },\n};\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'cdataTagName',\n  'cdataPositionChar',\n  'format',\n  'indentBy',\n  'supressEmptyNode',\n  'tagValueProcessor',\n  'attrValueProcessor',\n  'rootNodeName', //when array as root\n];\n\nfunction Parser(options) {\n  this.options = buildOptions(options, defaultOptions, props);\n  if (this.options.ignoreAttributes || this.options.attrNodeName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n  if (this.options.cdataTagName) {\n    this.isCDATA = isCDATA;\n  } else {\n    this.isCDATA = function(/*a*/) {\n      return false;\n    };\n  }\n  this.replaceCDATAstr = replaceCDATAstr;\n  this.replaceCDATAarr = replaceCDATAarr;\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n\n  if (this.options.supressEmptyNode) {\n    this.buildTextNode = buildEmptyTextNode;\n    this.buildObjNode = buildEmptyObjNode;\n  } else {\n    this.buildTextNode = buildTextValNode;\n    this.buildObjNode = buildObjectNode;\n  }\n\n  this.buildTextValNode = buildTextValNode;\n  this.buildObjectNode = buildObjectNode;\n}\n\nParser.prototype.parse = function(jObj) {\n  if(Array.isArray(jObj) && this.options.rootNodeName && this.options.rootNodeName.length > 1){\n    jObj = {\n      [this.options.rootNodeName] : jObj\n    }\n  }\n  return this.j2x(jObj, 0).val;\n};\n\nParser.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += ' ' + attr + '=\"' + this.options.attrValueProcessor('' + jObj[key]) + '\"';\n      } else if (this.isCDATA(key)) {\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAstr('', jObj[key]);\n        }\n      } else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          if (jObj[this.options.cdataTagName]) {\n            //value will added while processing cdata\n          } else {\n            val += this.options.tagValueProcessor('' + jObj[key]);\n          }\n        } else {\n          val += this.buildTextNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      if (this.isCDATA(key)) {\n        val += this.indentate(level);\n        if (jObj[this.options.textNodeName]) {\n          val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);\n        } else {\n          val += this.replaceCDATAarr('', jObj[key]);\n        }\n      } else {\n        //nested nodes\n        const arrLen = jObj[key].length;\n        for (let j = 0; j < arrLen; j++) {\n          const item = jObj[key][j];\n          if (typeof item === 'undefined') {\n            // supress undefined node\n          } else if (item === null) {\n            val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          } else if (typeof item === 'object') {\n            val += this.processTextOrObjNode(item, key, level)\n          } else {\n            val += this.buildTextNode(item, key, '', level);\n          }\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attrNodeName && key === this.options.attrNodeName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += ' ' + Ks[j] + '=\"' + this.options.attrValueProcessor('' + jObj[key][Ks[j]]) + '\"';\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextNode(result.val, key, result.attrStr, level);\n  } else {\n    return this.buildObjNode(result.val, key, result.attrStr, level);\n  }\n}\n\nfunction replaceCDATAstr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata + ']]' + this.tagEndChar;\n  } else {\n    return str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata + ']]' + this.tagEndChar);\n  }\n}\n\nfunction replaceCDATAarr(str, cdata) {\n  str = this.options.tagValueProcessor('' + str);\n  if (this.options.cdataPositionChar === '' || str === '') {\n    return str + '<![CDATA[' + cdata.join(']]><![CDATA[') + ']]' + this.tagEndChar;\n  } else {\n    for (let v in cdata) {\n      str = str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata[v] + ']]>');\n    }\n    return str + this.newLine;\n  }\n}\n\nfunction buildObjectNode(val, key, attrStr, level) {\n  if (attrStr && val.indexOf('<') === -1) {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      '>' +\n      val +\n      //+ this.newLine\n      // + this.indentate(level)\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  } else {\n    return (\n      this.indentate(level) +\n      '<' +\n      key +\n      attrStr +\n      this.tagEndChar +\n      val +\n      //+ this.newLine\n      this.indentate(level) +\n      '</' +\n      key +\n      this.tagEndChar\n    );\n  }\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n    //+ this.newLine\n  }\n}\n\nfunction buildTextValNode(val, key, attrStr, level) {\n  return (\n    this.indentate(level) +\n    '<' +\n    key +\n    attrStr +\n    '>' +\n    this.options.tagValueProcessor(val) +\n    '</' +\n    key +\n    this.tagEndChar\n  );\n}\n\nfunction buildEmptyTextNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildTextValNode(val, key, attrStr, level);\n  } else {\n    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n  }\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nfunction isCDATA(name) {\n  return name === this.options.cdataTagName;\n}\n\n//formatting\n//indentation\n//\\n after each closing or self closing tag\n\nmodule.exports = Parser;\n"]},"metadata":{},"sourceType":"script"}