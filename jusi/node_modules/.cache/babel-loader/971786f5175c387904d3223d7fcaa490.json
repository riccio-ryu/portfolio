{"ast":null,"code":"const utils = module.exports = {};\n\nconst entities = require('entities');\n\nconst xml2js = require('xml2js');\n\nutils.stripHtml = function (str) {\n  str = str.replace(/([^\\n])<\\/?(h|br|p|ul|ol|li|blockquote|section|table|tr|div)(?:.|\\n)*?>([^\\n])/gm, '$1\\n$3');\n  str = str.replace(/<(?:.|\\n)*?>/gm, '');\n  return str;\n};\n\nutils.getSnippet = function (str) {\n  return entities.decodeHTML(utils.stripHtml(str)).trim();\n};\n\nutils.getLink = function (links, rel, fallbackIdx) {\n  if (!links) return;\n\n  for (let i = 0; i < links.length; ++i) {\n    if (links[i].$.rel === rel) return links[i].$.href;\n  }\n\n  if (links[fallbackIdx]) return links[fallbackIdx].$.href;\n};\n\nutils.getContent = function (content) {\n  if (typeof content._ === 'string') {\n    return content._;\n  } else if (typeof content === 'object') {\n    let builder = new xml2js.Builder({\n      headless: true,\n      explicitRoot: true,\n      rootName: 'div',\n      renderOpts: {\n        pretty: false\n      }\n    });\n    return builder.buildObject(content);\n  } else {\n    return content;\n  }\n};\n\nutils.copyFromXML = function (xml, dest, fields) {\n  fields.forEach(function (f) {\n    let from = f;\n    let to = f;\n    let options = {};\n\n    if (Array.isArray(f)) {\n      from = f[0];\n      to = f[1];\n\n      if (f.length > 2) {\n        options = f[2];\n      }\n    }\n\n    const {\n      keepArray,\n      includeSnippet\n    } = options;\n\n    if (xml[from] !== undefined) {\n      dest[to] = keepArray ? xml[from] : xml[from][0];\n    }\n\n    if (dest[to] && typeof dest[to]._ === 'string') {\n      dest[to] = dest[to]._;\n    }\n\n    if (includeSnippet && dest[to] && typeof dest[to] === 'string') {\n      dest[to + 'Snippet'] = utils.getSnippet(dest[to]);\n    }\n  });\n};\n\nutils.maybePromisify = function (callback, promise) {\n  if (!callback) return promise;\n  return promise.then(data => setTimeout(() => callback(null, data)), err => setTimeout(() => callback(err)));\n};\n\nconst DEFAULT_ENCODING = 'utf8';\nconst ENCODING_REGEX = /(encoding|charset)\\s*=\\s*(\\S+)/;\nconst SUPPORTED_ENCODINGS = ['ascii', 'utf8', 'utf16le', 'ucs2', 'base64', 'latin1', 'binary', 'hex'];\nconst ENCODING_ALIASES = {\n  'utf-8': 'utf8',\n  'iso-8859-1': 'latin1'\n};\n\nutils.getEncodingFromContentType = function (contentType) {\n  contentType = contentType || '';\n  let match = contentType.match(ENCODING_REGEX);\n  let encoding = (match || [])[2] || '';\n  encoding = encoding.toLowerCase();\n  encoding = ENCODING_ALIASES[encoding] || encoding;\n\n  if (!encoding || SUPPORTED_ENCODINGS.indexOf(encoding) === -1) {\n    encoding = DEFAULT_ENCODING;\n  }\n\n  return encoding;\n};","map":{"version":3,"sources":["/Users/youyeonchang/Desktop/portfolio/jusi/node_modules/rss-parser/lib/utils.js"],"names":["utils","module","exports","entities","require","xml2js","stripHtml","str","replace","getSnippet","decodeHTML","trim","getLink","links","rel","fallbackIdx","i","length","$","href","getContent","content","_","builder","Builder","headless","explicitRoot","rootName","renderOpts","pretty","buildObject","copyFromXML","xml","dest","fields","forEach","f","from","to","options","Array","isArray","keepArray","includeSnippet","undefined","maybePromisify","callback","promise","then","data","setTimeout","err","DEFAULT_ENCODING","ENCODING_REGEX","SUPPORTED_ENCODINGS","ENCODING_ALIASES","getEncodingFromContentType","contentType","match","encoding","toLowerCase","indexOf"],"mappings":"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","sourcesContent":["const utils = module.exports = {};\nconst entities = require('entities');\nconst xml2js = require('xml2js');\n\nutils.stripHtml = function(str) {\n  str = str.replace(/([^\\n])<\\/?(h|br|p|ul|ol|li|blockquote|section|table|tr|div)(?:.|\\n)*?>([^\\n])/gm, '$1\\n$3')\n  str = str.replace(/<(?:.|\\n)*?>/gm, '');\n  return str;\n}\n\nutils.getSnippet = function(str) {\n  return entities.decodeHTML(utils.stripHtml(str)).trim();\n}\n\nutils.getLink = function(links, rel, fallbackIdx) {\n  if (!links) return;\n  for (let i = 0; i < links.length; ++i) {\n    if (links[i].$.rel === rel) return links[i].$.href;\n  }\n  if (links[fallbackIdx]) return links[fallbackIdx].$.href;\n}\n\nutils.getContent = function(content) {\n  if (typeof content._ === 'string') {\n    return content._;\n  } else if (typeof content === 'object') {\n    let builder = new xml2js.Builder({headless: true, explicitRoot: true, rootName: 'div', renderOpts: {pretty: false}});\n    return builder.buildObject(content);\n  } else {\n    return content;\n  }\n}\n\nutils.copyFromXML = function(xml, dest, fields) {\n  fields.forEach(function(f) {\n    let from = f;\n    let to = f;\n    let options = {};\n    if (Array.isArray(f)) {\n      from = f[0];\n      to = f[1];\n      if (f.length > 2) {\n        options = f[2];\n      }\n    }\n    const { keepArray, includeSnippet } = options;\n    if (xml[from] !== undefined){\n      dest[to] = keepArray ? xml[from] : xml[from][0];\n    }\n    if (dest[to] && typeof dest[to]._ === 'string') {\n      dest[to]=dest[to]._;\n    }\n    if (includeSnippet && dest[to] && typeof dest[to] === 'string') {\n      dest[to + 'Snippet'] = utils.getSnippet(dest[to]);\n    }\n  })\n}\n\nutils.maybePromisify = function(callback, promise) {\n  if (!callback) return promise;\n  return promise.then(\n    data => setTimeout(() => callback(null, data)),\n    err => setTimeout(() => callback(err))\n  );\n}\n\nconst DEFAULT_ENCODING = 'utf8';\nconst ENCODING_REGEX = /(encoding|charset)\\s*=\\s*(\\S+)/;\nconst SUPPORTED_ENCODINGS = ['ascii', 'utf8', 'utf16le', 'ucs2', 'base64', 'latin1', 'binary', 'hex'];\nconst ENCODING_ALIASES = {\n  'utf-8': 'utf8',\n  'iso-8859-1': 'latin1',\n}\n\nutils.getEncodingFromContentType = function(contentType) {\n  contentType = contentType || '';\n  let match = contentType.match(ENCODING_REGEX);\n  let encoding = (match || [])[2] || '';\n  encoding = encoding.toLowerCase();\n  encoding = ENCODING_ALIASES[encoding] || encoding;\n  if (!encoding || SUPPORTED_ENCODINGS.indexOf(encoding) === -1) {\n    encoding = DEFAULT_ENCODING;\n  }\n  return encoding;\n}\n"]},"metadata":{},"sourceType":"script"}